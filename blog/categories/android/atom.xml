<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | feicien的技术博客]]></title>
  <link href="http://feicien.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://feicien.github.com/"/>
  <updated>2013-03-13T10:26:00+08:00</updated>
  <id>http://feicien.github.com/</id>
  <author>
    <name><![CDATA[feicien]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android使用Loader加载数据]]></title>
    <link href="http://feicien.github.com/blog/2012/12/27/android-loader-demo/"/>
    <updated>2012-12-27T10:49:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/27/android-loader-demo</id>
    <content type="html"><![CDATA[<p>从android3.0开始，android引入了很多新的api,像fragment，Loader,ViewPager,ActionBar等。今天我通过一个小demo,讲解一下我在使用Loader的一些开发经验，抛砖引玉，激发大家开发Android4.0+应用的兴趣。
这是一个省、市、县三级联动的Demo，如下图所示：
<img src="/images/blog/2012/12/27/125009ohvajnpjhoqozhqs.png" alt="demo" /></p>

<p>Loader一般是配合ContentProvider一起使用的,ContentProvider类似与Java Web开发中的dao层</p>

<p>如果你有Java Web的编程经验，你可以把ContentProvider看成DAO(数据访问层)，你提供一个Uri,它给你返回一个Cursor(可以把Cursor理解成一个装了很多数据的集合，类似JDBC中ResultSet).至于数据是放在文件中、数据库中、还是互联网上，你不用关心。</p>

<p>在Activity的onCreate()方法中调用</p>

<p>getLoaderManager.initLoader(int id,Bundle args,LoaderCallbacks&lt;Cursor&gt; callback)便可以初始化一个Loader.</p>

<p>参数说明：一个loader有一个id,如果id相同，便认为是同一个loader.在一个activity中可以创建多个Loader.在demo中，我创建了3个Loader,分别用来加载省份、城市、县的数据。这三个Loader就是用不同的id来标示的。</p>

<p>args 需要传递的参数。比如在demo中选择不通的省份，加载相应城市，我们需要把省份的code,传递到加载城市的Loader中。</p>

<p>callback 回调接口，该接口中，有3个方法需要我们实现。分别是onCreateLoader(),onLoaderFinished(),onLoaderReset(),系统初始化Loader后，会调用首先调用onCreateLoader()</p>

<p>Demo源码：<a href="http://github.com/feicien/StudyDemo/LoaderDemo">LoaderDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android服务器推送之GCM]]></title>
    <link href="http://feicien.github.com/blog/2012/11/27/android-push-gcm/"/>
    <updated>2012-11-27T11:56:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/11/27/android-push-gcm</id>
    <content type="html"><![CDATA[<p>GCM(Google Cloud Message for Android)是Google发布的Android服务器推送（push）技术。之前的C2DM(Android Cloud to Device Messaging)已与2012年6月26日被正式弃用，使用GCM,需要申请开通Google apis,Google apis包括了所有Google服务的api,比如Google Map、Google+、Analytics、YouTube等等，申请地址为：
<a href="https://code.google.com/apis/console">Google API 网站</a></p>

<h3>GCM有以下特点：</h3>

<ol>
<li>可以使用第三方应用服务器向Android应用推送消息</li>
<li>GCM不保证发送的消息的顺序，也不保证消息一定能够推送到手机（恩，谁也不能保证100%）</li>
<li>Android应用不需要运行就可以接收消息（是的，你没有看错，因为gcm被集成到系统中了，目前一些第三方的推送是在后台运行一个service维持长连接，与这些第三方推送相比，GCM不额外的耗电）</li>
<li>GCM只传递的数据（可以传递小于4kb的数据），对这些数据的处理可以全部由开发者控制（Google不对数据进行任何处理，仅仅转发一下而已）</li>
<li>对于Android4.04以上的系统使用GCM没有任何限制（国行手机也可以使用，截止2013年02月04日，android4.0+的份额为42.6%，随着4.0+版本的提升，Android的推送不再成为一个问题 <a href="https://developer.android.com/about/dashboards/index.html">Android版本分布</a>），Android2.2以上的系统需要安装Google Play Store，Android2.2以下的系统不能够使用GCM</li>
<li>对于Android3.0以前的系统，需要在设备上设置google账号</li>
<li>gcm一次最多只能向1000部设备发送消息，没有提供向所有用户发送的接口（可能google认为向应用程序推送的消息都是与该用户相关的，如果你非要实现群发，一次发送1000个用户，多发送几次就行了）</li>
</ol>


<h3>GCM使用流程如下图所示：</h3>

<p><img src="/images/blog/2011/11/gcm.png" alt="gcm使用流程图" /></p>

<p><strong>App</strong>是运行在Android手机上的应用程序，<strong>GCM Server</strong>是Google的GCM服务器，<strong>Our Server</strong>是第三方应用服务器。具体流程如下：</p>

<ol>
<li><strong>App</strong>发送 <strong>SenderID</strong>到<strong>GCM Server</strong>注册接收推送信息(SendID是开发者在Google的网站开通GCM服务时，创建项目的项目号)。</li>
<li><strong>GCM Server</strong> 向<strong>App</strong>返回RegId(RegId是GCM服务器通过一定算法生产的，可以唯一确定某一部手机上的某一个应用，这个RegId很重要)。</li>
<li><strong>App</strong>向<strong>Our Server</strong>发送RegId(推送消息的时候要使用RegId，GCM服务器是使用RegId来确定某一部手机上的某一个应用接收消息的，所以第三方服务器需要保存它，需要注意的是RegId很长，比如可能有183位，存数据库时需要注意字段长度)</li>
<li><strong>Our Server</strong>向<strong>GCM Server</strong>发送消息,传递appkey和RegId(appkey分为Oauth api key和simple api key)</li>
<li><strong>GCM Server</strong>把消息推送给<strong>App</strong></li>
</ol>


<p>更多信息，请访问<a href="https://developer.android.com/guide/google/gcm/gs.html">Android开发网站</a>，上面有快速开发指导，客户端与服务端集成介绍，和Demo下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建Android4.0平板模拟器]]></title>
    <link href="http://feicien.github.com/blog/2012/04/10/create-android4.0-avd/"/>
    <updated>2012-04-10T18:36:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/04/10/create-android4.0-avd</id>
    <content type="html"><![CDATA[<p>今天让我们来创建一个Android4.0的平板电脑模拟器，体验一下它有哪些特性吧。</p>

<p>过程和创建一般模拟器是一样的，如下图所示：</p>

<p><img src="/images/blog/2012/04/10/avd.png" alt="avd" /></p>

<ol>
<li>输入模拟器的名称</li>
<li>选择target android4.0.3</li>
<li>设置SD卡的大小</li>
<li>Skin 选择WXGA800</li>
<li>Hardware中的最后一项 默认是1024，在这里我把它改为了512（或者256）。</li>
</ol>


<p>如果不进行修改，电脑配置比较低的话，是无法启动模拟器的。1024好像代表给模拟器分配1G内存。</p>

<p>刚开始因为不了解这个情况，在Eclipse中，点击avd manager启动刚创建好的模拟器，无法启动，一定反应都没有。</p>

<p>傻傻等了几分钟。</p>

<p>后来在cmd命令行中启动，报了一个异常。google之，才找到原因</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Dashboard]]></title>
    <link href="http://feicien.github.com/blog/2012/03/20/android-dashboard/"/>
    <updated>2012-03-20T21:08:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/03/20/android-dashboard</id>
    <content type="html"><![CDATA[<p>Android Dashboard(仪表盘)，是一种Android UI设计模式，使用这种UI设计模式的应用可以把功能模块在同一个界面显示出来，目前（2013年03月11日更新），市场上已经很少见到这样的应用了，但在给政府做的项目中，使用这种设计的还比较多，因为这样的设计，可以更方便给客户演示功能。效果图如下：</p>

<p><img src="/images/blog/2012/03/20/android_dashboard.png" alt="仪表盘" /></p>

<p>目前网络上的教程，基本上是参考2011年的Google IO大会的官方应用的 <a href="http://code.google.com/p/iosched/">iosched</a>
DashboardLayout.java类集成自ViewGroup</p>

<p>```
public class DashboardLayout extends ViewGroup {</p>

<pre><code>private static final int UNEVEN_GRID_PENALTY_MULTIPLIER = 10;

private int mMaxChildWidth = 0;
private int mMaxChildHeight = 0;

public DashboardLayout(Context context) {
    super(context, null);
}

public DashboardLayout(Context context, AttributeSet attrs) {
    super(context, attrs, 0);
}

public DashboardLayout(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    mMaxChildWidth = 0;
    mMaxChildHeight = 0;

    // Measure once to find the maximum child size.

    int childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(
            MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.AT_MOST);
    int childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(
            MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.AT_MOST);

    final int count = getChildCount();
    for (int i = 0; i &lt; count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() == GONE) {
            continue;
        }

        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);

        mMaxChildWidth = Math.max(mMaxChildWidth, child.getMeasuredWidth());
        mMaxChildHeight = Math.max(mMaxChildHeight, child.getMeasuredHeight());
    }

    // Measure again for each child to be exactly the same size.

    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(
            mMaxChildWidth, MeasureSpec.EXACTLY);
    childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(
            mMaxChildHeight, MeasureSpec.EXACTLY);

    for (int i = 0; i &lt; count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() == GONE) {
            continue;
        }

        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
    }

    setMeasuredDimension(
            resolveSize(mMaxChildWidth, widthMeasureSpec),
            resolveSize(mMaxChildHeight, heightMeasureSpec));
}

@Override
protected void onLayout(boolean changed, int l, int t, int r, int b) {
    int width = r - l;
    int height = b - t;

    final int count = getChildCount();

    // Calculate the number of visible children.
    int visibleCount = 0;
    for (int i = 0; i &lt; count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() == GONE) {
            continue;
        }
        ++visibleCount;
    }

    if (visibleCount == 0) {
        return;
    }

    // Calculate what number of rows and columns will optimize for even horizontal and
    // vertical whitespace between items. Start with a 1 x N grid, then try 2 x N, and so on.
    int bestSpaceDifference = Integer.MAX_VALUE;
    int spaceDifference;

    // Horizontal and vertical space between items
    int hSpace = 0;
    int vSpace = 0;

    int cols = 1;
    int rows;

    while (true) {
        rows = (visibleCount - 1) / cols + 1;

        hSpace = ((width - mMaxChildWidth * cols) / (cols + 1));
        vSpace = ((height - mMaxChildHeight * rows) / (rows + 1));

        spaceDifference = Math.abs(vSpace - hSpace);
        if (rows * cols != visibleCount) {
            spaceDifference *= UNEVEN_GRID_PENALTY_MULTIPLIER;
        }

        if (spaceDifference &lt; bestSpaceDifference) {
            // Found a better whitespace squareness/ratio
            bestSpaceDifference = spaceDifference;

            // If we found a better whitespace squareness and there's only 1 row, this is
            // the best we can do.
            if (rows == 1) {
                break;
            }
        } else {
            // This is a worse whitespace ratio, use the previous value of cols and exit.
            --cols;
            rows = (visibleCount - 1) / cols + 1;
            hSpace = ((width - mMaxChildWidth * cols) / (cols + 1));
            vSpace = ((height - mMaxChildHeight * rows) / (rows + 1));
            break;
        }

        ++cols;
    }

    // Lay out children based on calculated best-fit number of rows and cols.

    // If we chose a layout that has negative horizontal or vertical space, force it to zero.
    hSpace = Math.max(0, hSpace);
    vSpace = Math.max(0, vSpace);

    // Re-use width/height variables to be child width/height.
    width = (width - hSpace * (cols + 1)) / cols;
    height = (height - vSpace * (rows + 1)) / rows;

    int left, top;
    int col, row;
    int visibleIndex = 0;
    for (int i = 0; i &lt; count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() == GONE) {
            continue;
        }

        row = visibleIndex / cols;
        col = visibleIndex % cols;

        left = hSpace * (col + 1) + width * col;
        top = vSpace * (row + 1) + height * row;

        child.layout(left, top,
                (hSpace == 0 &amp;&amp; col == cols - 1) ? r : (left + width),
                (vSpace == 0 &amp;&amp; row == rows - 1) ? b : (top + height));
        ++visibleIndex;
    }
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Http Client]]></title>
    <link href="http://feicien.github.com/blog/2012/03/18/android-http-client/"/>
    <updated>2012-03-18T21:13:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/03/18/android-http-client</id>
    <content type="html"><![CDATA[<p>大部分Android应用程序联网都是通过HTTP来发送和接受数据的。Android有2个Http客户端：HttpURLConnection和Apache Http Client.它们都支持Https,流媒体的上传下载，配置连接超时，ipv6和连接池。</p>

<p>那么在我们的程序中选择哪一个好呢？</p>

<p>通过Android的官方博客：<a href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html">blogspot博客，需要翻墙</a> 如果你的应用api版本2.3及以上HttpURLConnection是更好的选择。</p>

<p>下面通过代码来演示HttpURLConnection的使用。</p>

<p>```
//获取html源代码</p>

<pre><code>public static String getHtml(String path) throws Exception {
    URL url=new URL(path);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();

    conn.setConnectTimeout(5000);
    conn.setRequestMethod("GET");

    if(conn.getResponseCode()==200){
        InputStream is=conn.getInputStream();
        byte[] data=read(is);
        String html=new String(data,"UTF-8");
        return html;
    }
    return null;
}
</code></pre>

<p>```</p>

<p>```</p>

<p>//将输入流读到内存中</p>

<pre><code>public static byte[] read(InputStream is) throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();

    byte[] buffer =new byte[1024];
    int len=0;
    while((len=is.read(buffer))!=-1){
        baos.write(buffer, 0, len);
    }
    is.close();
    return baos.toByteArray();
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
