<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | feicien的技术博客]]></title>
  <link href="http://feicien.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://feicien.github.com/"/>
  <updated>2013-03-13T10:26:00+08:00</updated>
  <id>http://feicien.github.com/</id>
  <author>
    <name><![CDATA[feicien]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JAVA实现微信公众账户主动群发功能]]></title>
    <link href="http://feicien.github.com/blog/2012/12/22/weixin-push-message/"/>
    <updated>2012-12-22T13:52:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/22/weixin-push-message</id>
    <content type="html"><![CDATA[<p><strong>2013年03月13日更新</strong>最近有博友反应说博客中的代码已经失效，今天有时间，我测试了一下，果然以前的代码不能使用了，于是我对本篇博客进行了大篇幅的修改。</p>

<h3>下面是JAVA实现的原理：</h3>

<h4>1. 微信平台相关url:</h4>

<p>```</p>

<p>public static String LOGIN_URL = "http://mp.weixin.qq.com/cgi-bin/login?lang=zh_CN";
public static String INDEX_URL = "http://mp.weixin.qq.com/cgi-bin/indexpage?t=wxm-index&amp;lang=zh_CN";
public static String FANS_URL = "http://mp.weixin.qq.com/cgi-bin/contactmanagepage?t=wxm-friend&amp;lang=zh_CN&amp;pagesize=10&amp;pageidx=0&amp;type=0&amp;groupid=0";
public static String SEND_MSG = "http://mp.weixin.qq.com/cgi-bin/singlesend?t=ajax-response&amp;lang=zh_CN";</p>

<p>```</p>

<h4>2. 获取登录session</h4>

<p>```</p>

<p>public static Map&lt;String, String> auth(String username, String password)
throws IOException {map.put("username", username);
map.put("pwd", MD5.getMD5(password.substring(0, 15).getBytes()).toUpperCase());</p>

<pre><code>            map.put("f", "json");
</code></pre>

<p>Response response = Jsoup.connect(LOGIN_URL).ignoreContentType(true).method(Method.POST).data(map).execute();</p>

<pre><code>            Map&lt;String, String&gt; cookies = response.cookies();
</code></pre>

<p>用户密码验证通过后，服务器跳转到首页
response = Jsoup.connect(INDEX_URL).ignoreContentType(true).method(Method.POST).cookies(cookies).execute();</p>

<pre><code>            return response.cookies();
</code></pre>

<p>}</p>

<p>```</p>

<h4>3. 获取关注列表</h4>

<p>```</p>

<p>public static List<WeiXinFans> getFans(Map&lt;String, String> cookie)throws IOException {
Document document = Jsoup.connect(FANS_URL).cookies(cookie).post();
Elements eles = document.select("#json-friendList");
Element element = eles.get(0);
String json = element.data();
Gson gson = new Gson();
return gson.fromJson(json, new TypeToken&lt;List<WeiXinFans>>() {}.getType());
}</p>

<p>```</p>

<h4>4. 发送消息</h4>

<p>```</p>

<p>public static void sendMsg(Map&lt;String, String> cookie,
String content,String fakeId) throws IOException {</p>

<p>HashMap&lt;String, String> map = new HashMap&lt;String, String>();
map.put("tofakeid", fakeId);
map.put("content", content);
map.put("error", "false");
map.put("type", "1");
map.put("ajax", "1");
Document document = Jsoup.connect(SEND_MSG).data(map).cookies(cookie).post();
Element body = document.body();
System.out.println(body.text());
}</p>

<p>```</p>

<h4>5. test</h4>

<p>```</p>

<p>public static void main(String[] args) throws IOException {
Map&lt;String, String> cookie = auth("用户名", "密码");
List<WeiXinFans> list = getFans(cookie);
for (WeiXinFans fans : list) {
sendMsg(cookie, "起床了没有", fans.getFakeId());
}</p>

<p>}</p>

<p>```
上面便是相关代码，其中使用到了Jsoup与Gson 2个jar包</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA实现微信公众账号自定义消息回复]]></title>
    <link href="http://feicien.github.com/blog/2012/12/19/weixin-java-api/"/>
    <updated>2012-12-19T12:09:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/19/weixin-java-api</id>
    <content type="html"><![CDATA[<p>最近有没有在玩微信公众账号？很多公众账号有自动回复功能，比如爱范儿的appsolution发送Android或者IOS,它就会想你推荐好玩的app.</p>

<p>微信对公众账号提供了api接口来自定义回复介绍到的消息，并且提供了PHP的demo.这里我使用JAVA来实现接口的调用。</p>

<h3>能够实现本demo中描述的功能，你需要满足的下面的条件：</h3>

<ol>
<li>有一个微信公众账号</li>
<li>有能够运行在公网上的服务器（推荐使用新浪的SAE）</li>
<li>了解最基本的JAVA EE编程（会编写servlet）</li>
</ol>


<h3>(一)注册微信公众账号</h3>

<p>微信公众账号注册地址：<a href="http://mp.weixin.qq.com">http://mp.weixin.qq.com</a>。</p>

<p>公众账号需要与你的QQ号进行绑定。并且该QQ没有与其它的微信号绑定过（当然你可以先解除与其它微信的绑定）</p>

<h3>(二)设置公众平台接口信息</h3>

<p>注册成功后，进入微信公众账号管理界面，点击设置-&gt;自定义回复-&gt;前往设置。填写相关信息，其中需要注意的是URL和Token. 如果你随便填写URL的话，会提示下面的信息：你的服务器没有正确响应Token验证，请阅读消息接口使用指南。如图所示：</p>

<p><img src="/images/blog/2012/12/QQ20121219-1.png" alt="解析xml" /></p>

<p>这也是为什么要求“有能够运行在公网上的服务器”。本文以新浪的SAE作为服务器环境（好消息，SAE已经开放JAVA应用，不需要满世界找邀请码了），在SAE上创建一个JAVA应用，并上传已经写好的JAVA WEB应用war包，该应用中只有一个Servlet.</p>

<p>其中doGet方法如图所示</p>

<p><img src="/images/blog/2012/12/QQ20121219-14.png" alt="doget" /></p>

<p>这里只是简单的把接收到的echostr字符串原样的返回回去了。这样写是为了能够先通过微信服务器的验证。在SAE上部署好应用后，在回到微信公众账号设置界面，URL添加该servlet的访问地址，token随便填写一个字符串，点击提交。</p>

<!--more-->


<p>出现“提交成功”提示，说明接口配置成功了。如图所示</p>

<p><img src="/images/blog/2012/12/QQ20121219-13.png" alt="提交成功" /></p>

<h3>(三)实现自定义消息回复</h3>

<p>微信服务器会在公众账号收到用户消息的时候，把消息通过post方法发送到你的服务器，也就是servlet的doPost方法，如图所示：</p>

<p><img src="/images/blog/2012/12/QQ20121219-15.png" alt="dopost" /></p>

<p>doPost方法中主要实现3个功能：1、从输入流中获取到消息xml。2、通过业务逻辑得到回复的消息xml（具体逻辑后面会讲解）。3、把回复xml写给服务器服务器。</p>

<h3>(四)消息xml的格式</h3>

<p>消息分为文本消息、图文消息、位置消息。</p>

<p>文本消息xml格式</p>

<div>

<pre>&lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[this is a test]]&gt;&lt;/Content&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 文本消息为text

 Content 消息内容</pre>

</div>


<h4>地理位置消息xml格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[location]]&gt;&lt;/MsgType&gt;

 &lt;Location_X&gt;23.134521&lt;/Location_X&gt;

 &lt;Location_Y&gt;113.358803&lt;/Location_Y&gt;

 &lt;Scale&gt;20&lt;/Scale&gt;

 &lt;Label&gt;&lt;![CDATA[位置信息]]&gt;&lt;/Label&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 消息类型，地理位置为location

 Location_X 地理位置纬度

 Location_Y 地理位置经度

 Scale 地图缩放大小

 Label 地理位置信息</pre>

</div>


<h4>图片消息结构</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;

 &lt;PicUrl&gt;&lt;![CDATA[this is a url]&gt;&lt;/PicUrl&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 消息类型image

 PicUrl 图片链接，开发者可以用HTTP GET获取</pre>

</div>


<p>&nbsp;</p>

<p>&nbsp;</p>

<h3>(五) 回复消息xml的格式</h3>

<p>对于每一个POST请求，开发者在响应包中返回特定xml结构，对该消息进行相应操作（现支持回复文本消息 、 回复图文消息和星标操作）。xml结构如下：</p>

<h4>回复文本消息格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[content]]&gt;&lt;/Content&gt;

 &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;

 &lt;/xml&gt;</pre>

<pre> FromUserName 消息发送方

 ToUserName 消息接收方

 CreateTime 消息创建时间

 MsgType 消息类型，文本消息必须填写text

 Content 消息内容，大小限制在2048字节，字段为空为不合法请求</pre>

</div>


<h4>回复图文消息格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[]]&gt;&lt;/Content&gt;

 &lt;ArticleCount&gt;2&lt;/ArticleCount&gt;

 &lt;Articles&gt;

 &lt;item&gt;

 &lt;Title&gt;&lt;![CDATA[title1]]&gt;&lt;/Title&gt;

 &lt;Description&gt;&lt;![CDATA[description1]]&gt;&lt;/Description&gt;

 &lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;

 &lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;

 &lt;/item&gt;

 &lt;item&gt;

 &lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;

 &lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;

 &lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;

 &lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;

 &lt;/item&gt;

 &lt;/Articles&gt;

 &lt;FuncFlag&gt;1&lt;/FuncFlag&gt;

 &lt;/xml&gt;</pre>

<pre> FromUserName 消息发送方

 ToUserName 消息接收方

 CreateTime 消息创建时间

 MsgType 消息类型，图文消息必须填写news

 Content 消息内容，图文消息可填空

 ArticleCount 图文消息个数，限制为10条以内

 Articles 多条图文消息信息，默认第一个item为大图

 Title 图文消息标题

 Description 图文消息描述

 PicUrl 图片链接，支持JPG、PNG格式，较好的效果为大图640*320，小图80*80，限制图片链接的域名需要与开发者填写的基本资料中的Url一致

 Url 点击图文消息跳转链接</pre>

</div>


<h4>星标消息</h4>

<p>在xml结构中，有一个FuncFlag字段，开发者可以通过填写FuncFlag字段为1来对消息进行星标，你可以在实时消息的<a href="http://mp.weixin.qq.com/cgi-bin/getmessage?t=wxm-message&amp;lang=zh_CN&amp;count=50&amp;star=1">星标消息分类</a>中找到该消息</p>

<h3>(六)自定义消息回复</h3>

<p>在doPost方法中的第二步，我们要处理请求的xml得到回复的xml，具体的逻辑是：
1. 解析xml。
2. 保存消息到数据库（便于分析数据，你也可以不保存）。
3. 处理消息。如图所示：</p>

<p><img src="/images/blog/2012/12/QQ20121219-16.png" alt="解析xml" /></p>

<ol>
<li>解析xml,把解析到的数据保存到HashMap中</li>
</ol>


<p><img src="/images/blog/2012/12/QQ20121219-17.png" alt="解析xml" /></p>

<ul>
<li><p>保存数据到数据库，如果你不想保存到数据库，这一步可以省略</p></li>
<li><p>处理消息,不同类型的消息可以通过MsgType来识别</p></li>
</ul>


<p><img src="/images/blog/2012/12/QQ20121219-18.png" alt="处理消息" /></p>

<ul>
<li>处理文本消息，这里演示回应一个文本消息，实际的处理是你的具体业务决定的</li>
</ul>


<p><img src="/images/blog/2012/12/QQ20121219-19.png" alt="处理文本信息" /></p>

<ul>
<li>生成xml文件</li>
</ul>


<p><img src="/images/blog/2012/12/QQ20121219-20.png" alt="生成xml" /></p>

<p><strong>结束语</strong>：解析与生成xml使用的是dom4j,如果你也使用它，需要添加相关jar包。另外，本人不提供源代码，因为相关的代码我都贴出来了。如果你不懂Java EE的相关编程，给你源代码，你还问我怎么运行呢。欢迎关注我的微博：<a href="http://weibo.com/feicien">http://weibo.com/feicien</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat 配置JDBC数据源datasource]]></title>
    <link href="http://feicien.github.com/blog/2012/05/08/java-tomcat-jdbc-datasource/"/>
    <updated>2012-05-08T18:07:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/05/08/java-tomcat-jdbc-datasource</id>
    <content type="html"><![CDATA[<h4>1. 编辑Tomcat安装目录conf文件夹中server.xml,在</Host>标签前添加</h4>

<p>```
<Context  path="/chaoshi"
　　　　　　docBase="chaoshi"
　　　　　　debug="5"
　　　　　　reloadable="true"
　　　　　　crossContext="true" 
　　　　　　workDir=""></p>

<pre><code>         &lt;Resource  name="jdbc/mydatasource"
                    auth="Container"
</code></pre>

<p>　　　　　　　　　　　　　　type="javax.sql.DataSource"</p>

<pre><code>             　 　　 maxActive="100" 
</code></pre>

<p>　　　　　　　　　　　　　　maxIdle="30"
　　　　　　　　　　　　　　maxWait="10000"</p>

<pre><code>              　　　 username="root" 
</code></pre>

<p>　　　　　　　　　　　　　　password="123456"
　　　　　　　　　　　　　　driverClassName="com.mysql.jdbc.Driver"
　　　　　　　　　　　　　　url="jdbc:mysql://localhost:3306/mydatabase"/>
</Context>
```</p>

<h4>2. 在应用的WEB-INF目录下web.xml文件中添加如下配置</h4>

<p><code>
&lt;resource-ref&gt;
　　&lt;description&gt;DB Connection&lt;/description&gt;
　　&lt;res-ref-name&gt;jdbc/mydatasource&lt;/res-ref-name&gt;
　　&lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
　　&lt;res-auth&gt;Container&lt;/res-auth&gt;
&lt;/resource-ref&gt;
</code></p>

<h4>3. 在JSP或Servlet或JavaBean中用如下Java代码获得数据库连接</h4>

<p><code>
Context initial = new InitialContext();
//其中mysql为数据源jndi名称
DataSource ds = (DataSource)initial.lookup("java:comp/env/jdbc/mydatasource");
Connection con=ds.getConnection();
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts2+Hibernate+Spring+Webservice 项目从Tomcat到WebLogic遇到问题的解决方法]]></title>
    <link href="http://feicien.github.com/blog/2012/04/26/ssh-from-tomcat-to-weblogic/"/>
    <updated>2012-04-26T20:41:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/04/26/ssh-from-tomcat-to-weblogic</id>
    <content type="html"><![CDATA[<p>公司一个SSH+Webservice项目开发时是在Tomcat下运行的。却不能部署到WebLogic上。</p>

<p>下面是遇到的问题和相应的解决办法</p>

<h4>一、异常</h4>

<p><code>
Could not load user defined filter in web.xml: org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.
ClassNotFoundException:org.apache.velocity.app.VelocityEngine
</code>
<strong>解决方法：添加2个jar包</strong></p>

<ul>
<li>velocity-tools-2.0.jar</li>
<li>velocity-1.7.jar</li>
</ul>


<h4>二、异常</h4>

<p><code>
[com.sun.xml.ws.policy.jaxws.BuilderHandler] getPolicySubjects
严重: [failed to localize] WSP_1014_POLICY_REFERENCE_DOES_NOT_EXIST(zip:D:/bea/weblogic1034/webdomain/servers/AdminServer/tmp/_WL_user/_appsdir_WebServicePro_dir/achpn5/war/WEB-INF/lib/webservices-rt.jar!/WEB-INF/wsdl/wsat.wsdl#Addressing_policy)
[com.sun.xml.ws.policy.jaxws.PolicyWSDLParserExtension] finished
严重: [failed to localize] WSP_1014_POLICY_REFERENCE_DOES_NOT_EXIST(zip:D:/bea/weblogic1034/webdomain/servers/AdminServer/tmp/_WL_user/_appsdir_WebServicePro_dir/achpn5/war/WEB-INF/lib/webservices-rt.jar!/WEB-INF/wsdl/wsat.wsdl#Addressing_policy)
[com.sun.xml.ws.policy.jaxws.PolicyWSDLParserExtension] finished
严重: [failed to localize] WSP_1018_POLICY_EXCEPTION_WHILE_FINISHING_PARSING_WSDL()
com.sun.xml.ws.policy.PolicyException: [failed to localize] WSP_1014_POLICY_REFERENCE_DOES_NOT_EXIST(zip:D:/bea/weblogic1034/webdomain/servers/AdminServer/tmp/_WL_user/_appsdir_WebServicePro_dir/achpn5/war/WEB-INF/lib/webservices-rt.jar!/WEB-INF/wsdl/wsat.wsdl#Addressing_policy)
at com.sun.xml.ws.policy.jaxws.BuilderHandler.getPolicies(BuilderHandler.java:93)
</code></p>

<p><strong>解决办法：删除以下5个jar包</strong></p>

<ul>
<li>webservices-extra-api.jar</li>
<li>webservices-extra.jar</li>
<li>webservices-rt.jar</li>
<li>webservices-tools.jar</li>
<li>wsdl4j-1.5.1.jar</li>
</ul>


<h4>三、ClassNotFoundException: org.hibernate.hql.ast.HqlToken(hibernate3 weblogic antrl 问题</h4>

<p><strong>解决办法：在applicationContext.xml中的，设置hibernate.query.factory_class</strong></p>

<p>```
<property name="hibernateProperties">
<pros></p>

<p><prop key="hibernate.query.factory_class">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop>
</pros>
</property>
```</p>

<h4>四、日志问题：　</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate4.1.2配置]]></title>
    <link href="http://feicien.github.com/blog/2012/04/20/start-hibernate4.1.2/"/>
    <updated>2012-04-20T16:08:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/04/20/start-hibernate4.1.2</id>
    <content type="html"><![CDATA[<p>```</p>

<p>&lt;?xml version='1.0' encoding='utf-8'?>
&lt;!DOCTYPE hibernate-configuration PUBLIC</p>

<pre><code>    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
</code></pre>

<p><hibernate-configuration></p>

<pre><code>&lt;session-factory&gt;
    &lt;!-- 数据库的配置 --&gt;
    &lt;property name="hibernate.bytecode.use_reflection_optimizer"&gt;false&lt;/property&gt;
    &lt;property name="hibernate.connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;
    &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/hibernate&lt;/property&gt;
    &lt;property name="hibernate.connection.username"&gt;root&lt;/property&gt;
    &lt;property name="hibernate.connection.password"&gt;123456&lt;/property&gt;
    &lt;!-- SQL dialect 数据库方言，这里我们用MySQL --&gt;
    &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
    &lt;!-- 设置show_sql为true表示让hibernate将生成sql语句在控制台打印出来 --&gt;
    &lt;property name="show_sql"&gt;true&lt;/property&gt;
    &lt;!-- Drop and re-create the database schema on startup 是否让hibernate自动为我们创建表 --&gt;
    &lt;property name="hbm2ddl.auto"&gt;update&lt;/property&gt;
    &lt;property name="javax.persistence.validation.mode"&gt;none&lt;/property&gt;
    &lt;mapping class="com.loveplusplus.bean.Category"/&gt;
    &lt;mapping class="com.loveplusplus.bean.Goods"/&gt;
&lt;/session-factory&gt;
</code></pre>

<p></hibernate-configuration></p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
