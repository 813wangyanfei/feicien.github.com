<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[feicien的技术博客]]></title>
  <link href="http://feicien.github.com/atom.xml" rel="self"/>
  <link href="http://feicien.github.com/"/>
  <updated>2013-03-05T09:58:38+08:00</updated>
  <id>http://feicien.github.com/</id>
  <author>
    <name><![CDATA[feicien]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[start use octopress]]></title>
    <link href="http://feicien.github.com/blog/2013/02/26/start-use-octopress/"/>
    <updated>2013-02-26T09:08:00+08:00</updated>
    <id>http://feicien.github.com/blog/2013/02/26/start-use-octopress</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android使用Loader加载数据]]></title>
    <link href="http://feicien.github.com/blog/2012/12/27/android-loader-demo/"/>
    <updated>2012-12-27T10:49:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/27/android-loader-demo</id>
    <content type="html"><![CDATA[<p>从android3.0开始，android引入了很多新的api,像fragment，Loader,ViewPager,ActionBar等。今天我通过一个小demo,讲解一下我在使用Loader的一些开发经验，抛砖引玉，激发大家开发Android4.0+应用的兴趣。</p>

<p>这是一个省、市、县三级联动的Demo。</p>

<p>Loader一般是配合ContentProvider一起使用的。</p>

<p>如果你有Java Web的编程经验，你可以把ContentProvider看成DAO(数据访问层)，你提供一个Uri,它给你返回一个Cursor(可以把Cursor理解成一个装了很多数据的集合，类似JDBC中ResultSet).至于数据是放在文件中、数据库中、还是互联网上，你不用关心。</p>

<p>在Activity的onCreate()方法中调用</p>

<p>getLoaderManager.initLoader(int id,Bundle args,LoaderCallbacks&lt;Cursor&gt; callback)便可以初始化一个Loader.</p>

<p>参数说明：一个loader有一个id,如果id相同，便认为是同一个loader.在一个activity中可以创建多个Loader.在demo中，我创建了3个Loader,分别用来加载省份、城市、县的数据。这三个Loader就是用不同的id来标示的。</p>

<p>args 需要传递的参数。比如在demo中选择不通的省份，加载相应城市，我们需要把省份的code,传递到加载城市的Loader中。</p>

<p>callback 回调接口，该接口中，有3个方法需要我们实现。分别是onCreateLoader(),onLoaderFinished(),onLoaderReset(),系统初始化Loader后，会调用首先调用onCreateLoader()</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA实现微信公众账户主动群发功能]]></title>
    <link href="http://feicien.github.com/blog/2012/12/22/weixin-push-message/"/>
    <updated>2012-12-22T13:52:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/22/weixin-push-message</id>
    <content type="html"><![CDATA[<p>在上一篇博客中介绍了JAVA实现微信公众账号的自定义消息回复，发到一个技术群中后，有网友问如何实现消息的主动推送？是的，现在微信的公共帐号官方api里并没有提供主动推送功能。</p>

<p><strong>分析：</strong>既然微信公众平台上可以查询用户列表，可以给用户发送消息，就可以用程序模拟登录，获取到cookie和用户列表，然后主动群发功能，这样还可以解决每天群发的限制，不过这样是有风险的，可能会导致腾讯的封号，所以不要轻易使用。</p>

<h3>下面是JAVA实现的原理：</h3>

<ol>
<li>获取cookie</li>
</ol>


<p>微信公众平台的登录验证地址：http://mp.weixin.qq.com/cgi-bin/login?lang=zh_CN</p>

<p>请求方法：post</p>

<p>需要传递的参数：</p>

<p>username：用户名</p>

<p>pwd1:密码的0到15位的MD5值，</p>

<p>pwd2:密码的MD5值</p>

<p>f:json</p>

<p>请求这个地址会得到一个名称叫：mp_sid 的cookie
在我测试的过程中发现光有这个这个cookie是不行的，还需要名称为pt2gguin，ts_uid，pgv_pvid，pgv_info=ssid，o_cookie，mp_user的cookie具体是在那里设置的，我也没有去深究。就直接从浏览器中把它们拷贝并拼接到mp_sid前。</p>

<ol>
<li>请求分组关注列表</li>
</ol>


<p>请求地址：http://mp.weixin.qq.com/cgi-bin/contactmanagepage?t=wxm-friend&amp;lang=zh_CN&amp;pagesize=10&amp;pageidx=0&amp;type=0&amp;groupid=0
pagesize=10</p>

<p>每页显示的关注人数 可以设置大一些，比如1000
groupid:分组id 0:未分组 1：黑名单 2：星标好友 如果你自己创建有好友，可以在浏览器地址栏看到分组的id</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static ListgetFans(SendHttpRequestter send,String sessionId) {
</span><span class='line'>  //获取html页面
</span><span class='line'>  String fansHtml = send.sendPost(FANS_URL, null, sessionId);
</span><span class='line'>  //解析json数据
</span><span class='line'>  Matcher matcher = Pattern.compile("\\&lt;script id=\"json-friendList\" type=\"json/text\"\\&gt;(.*?)\\&lt;/script\\&gt;").matcher(fansHtml);
</span><span class='line'>
</span><span class='line'>  String json = "";
</span><span class='line'>  while (matcher.find()) {
</span><span class='line'>      json = matcher.group(1);
</span><span class='line'>  }
</span><span class='line'>  Gson gson = new Gson();
</span><span class='line'>  return gson.fromJson(json, new TypeToken&lt;List&gt;() {}.getType());
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>WeiXinFans 类字段</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private String fakeId; //发送消息时使用到这个id
</span><span class='line'>private String nickName;//昵称
</span><span class='line'>private String remarkName;//备注名
</span><span class='line'>private int groupId;//分组id</span></code></pre></td></tr></table></div></figure>


<ol>
<li>向指定的fakeId发送文字消息</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void sendMsg(SendHttpRequestter send, String sessionId, String content,String fakeId) {
</span><span class='line'>  HashMapmap = new HashMap();
</span><span class='line'>  map.put("tofakeid", fakeId);//tofakeid 第二步中获取的id
</span><span class='line'>  map.put("content", content);//要发送的内容
</span><span class='line'>  map.put("error", "false");
</span><span class='line'>  map.put("type", "1");
</span><span class='line'>  map.put("ajax", "1");
</span><span class='line'>
</span><span class='line'>  String html = send.sendPost(SEND_MSG_URL, map, sessionId);
</span><span class='line'>  System.out.println(html);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>发送地址SEND_MSG_URL：http://mp.weixin.qq.com/cgi-bin/singlesend?t=ajax-response&amp;lang=zh_CN</p>

<ol>
<li>群发</li>
</ol>


<p>既然可以发送一条，使用一个for循环，不就可以群发了。</p>

<p><strong>结束语：</strong>SendHttpRequestter 这个类里面有个人信息，源码就不提供了，里面有2个方法。
一个获取cookie的方法，一个发送post请求的方法，网上都可以找到的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA实现微信公众账号自定义消息回复]]></title>
    <link href="http://feicien.github.com/blog/2012/12/19/weixin-java-api/"/>
    <updated>2012-12-19T12:09:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/19/weixin-java-api</id>
    <content type="html"><![CDATA[<p>最近有没有在玩微信公众账号？很多公众账号有自动回复功能，比如爱范儿的appsolution发送Android或者IOS,它就会想你推荐好玩的app.</p>

<p>微信对公众账号提供了api接口来自定义回复介绍到的消息，并且提供了PHP的demo.这里我使用JAVA来实现接口的调用。</p>

<h3>能够实现本demo中描述的功能，你需要满足的下面的条件：</h3>

<ol>
<li>有一个微信公众账号</li>
<li>有能够运行在公网上的服务器（推荐使用新浪的SAE）</li>
<li>了解最基本的JAVA EE编程（会编写servlet）</li>
</ol>


<h3>(一)注册微信公众账号</h3>

<p>微信公众账号注册地址：<a href="http://mp.weixin.qq.com">http://mp.weixin.qq.com</a>。</p>

<p>公众账号需要与你的QQ号进行绑定。并且该QQ没有与其它的微信号绑定过（当然你可以先解除与其它微信的绑定）</p>

<h3>(二)设置公众平台接口信息</h3>

<p>注册成功后，进入微信公众账号管理界面，点击设置-&gt;自定义回复-&gt;前往设置。填写相关信息，其中需要注意的是URL和Token. 如果你随便填写URL的话，会提示下面的信息：你的服务器没有正确响应Token验证，请阅读消息接口使用指南。如图所示：</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-1.png" alt="解析xml" /></p>

<p>这也是为什么要求“有能够运行在公网上的服务器”。本文以新浪的SAE作为服务器环境（好消息，SAE已经开放JAVA应用，不需要满世界找邀请码了），在SAE上创建一个JAVA应用，并上传已经写好的JAVA WEB应用war包，该应用中只有一个Servlet.</p>

<p>其中doGet方法如图所示</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-14.png" alt="doget" /></p>

<p>这里只是简单的把接收到的echostr字符串原样的返回回去了。这样写是为了能够先通过微信服务器的验证。在SAE上部署好应用后，在回到微信公众账号设置界面，URL添加该servlet的访问地址，token随便填写一个字符串，点击提交。</p>

<!--more-->


<p>出现“提交成功”提示，说明接口配置成功了。如图所示</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-13.png" alt="提交成功" /></p>

<h3>(三)实现自定义消息回复</h3>

<p>微信服务器会在公众账号收到用户消息的时候，把消息通过post方法发送到你的服务器，也就是servlet的doPost方法，如图所示：</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-15.png" alt="dopost" /></p>

<p>doPost方法中主要实现3个功能：1、从输入流中获取到消息xml。2、通过业务逻辑得到回复的消息xml（具体逻辑后面会讲解）。3、把回复xml写给服务器服务器。</p>

<h3>(四)消息xml的格式</h3>

<p>消息分为文本消息、图文消息、位置消息。</p>

<p>文本消息xml格式</p>

<div>

<pre>&lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[this is a test]]&gt;&lt;/Content&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 文本消息为text

 Content 消息内容</pre>

</div>


<h4>地理位置消息xml格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[location]]&gt;&lt;/MsgType&gt;

 &lt;Location_X&gt;23.134521&lt;/Location_X&gt;

 &lt;Location_Y&gt;113.358803&lt;/Location_Y&gt;

 &lt;Scale&gt;20&lt;/Scale&gt;

 &lt;Label&gt;&lt;![CDATA[位置信息]]&gt;&lt;/Label&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 消息类型，地理位置为location

 Location_X 地理位置纬度

 Location_Y 地理位置经度

 Scale 地图缩放大小

 Label 地理位置信息</pre>

</div>


<h4>图片消息结构</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;

 &lt;PicUrl&gt;&lt;![CDATA[this is a url]&gt;&lt;/PicUrl&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 消息类型image

 PicUrl 图片链接，开发者可以用HTTP GET获取</pre>

</div>


<p>&nbsp;</p>

<p>&nbsp;</p>

<h3>(五) 回复消息xml的格式</h3>

<p>对于每一个POST请求，开发者在响应包中返回特定xml结构，对该消息进行相应操作（现支持回复文本消息 、 回复图文消息和星标操作）。xml结构如下：</p>

<h4>回复文本消息格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[content]]&gt;&lt;/Content&gt;

 &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;

 &lt;/xml&gt;</pre>

<pre> FromUserName 消息发送方

 ToUserName 消息接收方

 CreateTime 消息创建时间

 MsgType 消息类型，文本消息必须填写text

 Content 消息内容，大小限制在2048字节，字段为空为不合法请求</pre>

</div>


<h4>回复图文消息格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[]]&gt;&lt;/Content&gt;

 &lt;ArticleCount&gt;2&lt;/ArticleCount&gt;

 &lt;Articles&gt;

 &lt;item&gt;

 &lt;Title&gt;&lt;![CDATA[title1]]&gt;&lt;/Title&gt;

 &lt;Description&gt;&lt;![CDATA[description1]]&gt;&lt;/Description&gt;

 &lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;

 &lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;

 &lt;/item&gt;

 &lt;item&gt;

 &lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;

 &lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;

 &lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;

 &lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;

 &lt;/item&gt;

 &lt;/Articles&gt;

 &lt;FuncFlag&gt;1&lt;/FuncFlag&gt;

 &lt;/xml&gt;</pre>

<pre> FromUserName 消息发送方

 ToUserName 消息接收方

 CreateTime 消息创建时间

 MsgType 消息类型，图文消息必须填写news

 Content 消息内容，图文消息可填空

 ArticleCount 图文消息个数，限制为10条以内

 Articles 多条图文消息信息，默认第一个item为大图

 Title 图文消息标题

 Description 图文消息描述

 PicUrl 图片链接，支持JPG、PNG格式，较好的效果为大图640*320，小图80*80，限制图片链接的域名需要与开发者填写的基本资料中的Url一致

 Url 点击图文消息跳转链接</pre>

</div>


<h4>星标消息</h4>

<p>在xml结构中，有一个FuncFlag字段，开发者可以通过填写FuncFlag字段为1来对消息进行星标，你可以在实时消息的<a href="http://mp.weixin.qq.com/cgi-bin/getmessage?t=wxm-message&amp;lang=zh_CN&amp;count=50&amp;star=1">星标消息分类</a>中找到该消息</p>

<h3>(六)自定义消息回复</h3>

<p>在doPost方法中的第二步，我们要处理请求的xml得到回复的xml，具体的逻辑是：
1. 解析xml。
2. 保存消息到数据库（便于分析数据，你也可以不保存）。
3. 处理消息。如图所示：</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-16.png" alt="解析xml" /></p>

<ol>
<li>解析xml,把解析到的数据保存到HashMap中</li>
</ol>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-17.png" alt="解析xml" /></p>

<ul>
<li><p>保存数据到数据库，如果你不想保存到数据库，这一步可以省略</p></li>
<li><p>处理消息,不同类型的消息可以通过MsgType来识别</p></li>
</ul>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-18.png" alt="处理消息" /></p>

<ul>
<li>处理文本消息，这里演示回应一个文本消息，实际的处理是你的具体业务决定的</li>
</ul>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-19.png" alt="处理文本信息" /></p>

<ul>
<li>生成xml文件</li>
</ul>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-20.png" alt="生成xml" /></p>

<p><strong>结束语</strong>：解析与生成xml使用的是dom4j,如果你也使用它，需要添加相关jar包。另外，本人不提供源代码，因为相关的代码我都贴出来了。如果你不懂Java EE的相关编程，给你源代码，你还问我怎么运行呢。欢迎关注我的微博：<a href="http://weibo.com/feicien">http://weibo.com/feicien</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android服务器推送之GCM]]></title>
    <link href="http://feicien.github.com/blog/2012/11/27/android-push-gcm/"/>
    <updated>2012-11-27T11:56:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/11/27/android-push-gcm</id>
    <content type="html"><![CDATA[<p>GCM(Google Cloud Message for Android)是Google发布的Android服务器推送（push）技术。之前的C2DM(Android Cloud to Device Messaging)已与2012年6月26日被正式弃用，使用GCM,需要申请开通Google apis,Google apis包括了所有Google服务的api,比如Google Map、Google+、Analytics、YouTube等等，申请地址为：
<a href="https://code.google.com/apis/console">Google API 网站</a></p>

<h3>GCM有以下特点：</h3>

<ol>
<li>可以使用第三方应用服务器向Android应用推送消息</li>
<li>GCM不保证发送的消息的顺序，也不保证消息一定能够推送到手机（恩，谁也不能保证100%）</li>
<li>Android应用不需要运行就可以接收消息（是的，你没有看错，因为gcm被集成到系统中了，目前一些第三方的推送是在后台运行一个service维持长连接，与这些第三方推送相比，GCM不额外的耗电）</li>
<li>GCM只传递的数据（可以传递小于4kb的数据），对这些数据的处理可以全部由开发者控制（Google不对数据进行任何处理，仅仅转发一下而已）</li>
<li>对于Android4.04以上的系统使用GCM没有任何限制（国行手机也可以使用，截止2013年02月04日，android4.0+的份额为42.6%，随着4.0+版本的提升，Android的推送不再成为一个问题 <a href="https://developer.android.com/about/dashboards/index.html">Android版本分布</a>），Android2.2以上的系统需要安装Google Play Store，Android2.2以下的系统不能够使用GCM</li>
<li>对于Android3.0以前的系统，需要在设备上设置google账号</li>
<li>gcm一次最多只能向1000部设备发送消息，没有提供向所有用户发送的接口（可能google认为向应用程序推送的消息都是与该用户相关的，如果你非要实现群发，一次发送1000个用户，多发送几次就行了）</li>
</ol>


<h3>GCM使用流程如下图所示：</h3>

<p><img src="http://feicien.github.com/images/blog/2011/11/gcm.png" alt="gcm使用流程图" /></p>

<p><strong>App</strong>是运行在Android手机上的应用程序，<strong>GCM Server</strong>是Google的GCM服务器，<strong>Our Server</strong>是第三方应用服务器。具体流程如下：</p>

<ol>
<li><strong>App</strong>发送 <strong>SenderID</strong>到<strong>GCM Server</strong>注册接收推送信息(SendID是开发者在Google的网站开通GCM服务时，创建项目的项目号)。</li>
<li><strong>GCM Server</strong> 向<strong>App</strong>返回RegId(RegId是GCM服务器通过一定算法生产的，可以唯一确定某一部手机上的某一个应用，这个RegId很重要)。</li>
<li><strong>App</strong>向<strong>Our Server</strong>发送RegId(推送消息的时候要使用RegId，GCM服务器是使用RegId来确定某一部手机上的某一个应用接收消息的，所以第三方服务器需要保存它，需要注意的是RegId很长，比如可能有183位，存数据库时需要注意字段长度)</li>
<li><strong>Our Server</strong>向<strong>GCM Server</strong>发送消息,传递appkey和RegId(appkey分为Oauth api key和simple api key)</li>
<li><strong>GCM Server</strong>把消息推送给<strong>App</strong></li>
</ol>


<p>更多信息，请访问<a href="https://developer.android.com/guide/google/gcm/gs.html">Android开发网站</a>，上面有快速开发指导，客户端与服务端集成介绍，和Demo下载。</p>
]]></content>
  </entry>
  
</feed>
