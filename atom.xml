<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[feicien的技术博客]]></title>
  <link href="http://feicien.github.com/atom.xml" rel="self"/>
  <link href="http://feicien.github.com/"/>
  <updated>2013-03-13T10:26:00+08:00</updated>
  <id>http://feicien.github.com/</id>
  <author>
    <name><![CDATA[feicien]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android使用Loader加载数据]]></title>
    <link href="http://feicien.github.com/blog/2012/12/27/android-loader-demo/"/>
    <updated>2012-12-27T10:49:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/27/android-loader-demo</id>
    <content type="html"><![CDATA[<p>从android3.0开始，android引入了很多新的api,像fragment，Loader,ViewPager,ActionBar等。今天我通过一个小demo,讲解一下我在使用Loader的一些开发经验，抛砖引玉，激发大家开发Android4.0+应用的兴趣。
这是一个省、市、县三级联动的Demo，如下图所示：
<img src="http://feicien.github.com/images/blog/2012/12/27/125009ohvajnpjhoqozhqs.png" alt="demo" /></p>

<p>Loader一般是配合ContentProvider一起使用的,ContentProvider类似与Java Web开发中的dao层</p>

<p>如果你有Java Web的编程经验，你可以把ContentProvider看成DAO(数据访问层)，你提供一个Uri,它给你返回一个Cursor(可以把Cursor理解成一个装了很多数据的集合，类似JDBC中ResultSet).至于数据是放在文件中、数据库中、还是互联网上，你不用关心。</p>

<p>在Activity的onCreate()方法中调用</p>

<p>getLoaderManager.initLoader(int id,Bundle args,LoaderCallbacks&lt;Cursor&gt; callback)便可以初始化一个Loader.</p>

<p>参数说明：一个loader有一个id,如果id相同，便认为是同一个loader.在一个activity中可以创建多个Loader.在demo中，我创建了3个Loader,分别用来加载省份、城市、县的数据。这三个Loader就是用不同的id来标示的。</p>

<p>args 需要传递的参数。比如在demo中选择不通的省份，加载相应城市，我们需要把省份的code,传递到加载城市的Loader中。</p>

<p>callback 回调接口，该接口中，有3个方法需要我们实现。分别是onCreateLoader(),onLoaderFinished(),onLoaderReset(),系统初始化Loader后，会调用首先调用onCreateLoader()</p>

<p>Demo源码：<a href="http://github.com/feicien/StudyDemo/LoaderDemo">LoaderDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA实现微信公众账户主动群发功能]]></title>
    <link href="http://feicien.github.com/blog/2012/12/22/weixin-push-message/"/>
    <updated>2012-12-22T13:52:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/22/weixin-push-message</id>
    <content type="html"><![CDATA[<p><strong>2013年03月13日更新</strong>最近有博友反应说博客中的代码已经失效，今天有时间，我测试了一下，果然以前的代码不能使用了，于是我对本篇博客进行了大篇幅的修改。</p>

<h3>下面是JAVA实现的原理：</h3>

<h4>1. 微信平台相关url:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>public static String LOGIN_URL = "http://mp.weixin.qq.com/cgi-bin/login?lang=zh_CN";
</span><span class='line'>public static String INDEX_URL = "http://mp.weixin.qq.com/cgi-bin/indexpage?t=wxm-index&lang=zh_CN";
</span><span class='line'>public static String FANS_URL = "http://mp.weixin.qq.com/cgi-bin/contactmanagepage?t=wxm-friend&lang=zh_CN&pagesize=10&pageidx=0&type=0&groupid=0";
</span><span class='line'>public static String SEND_MSG = "http://mp.weixin.qq.com/cgi-bin/singlesend?t=ajax-response&lang=zh_CN";
</span></code></pre></td></tr></table></div></figure>


<h4>2. 获取登录session</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>public static Map&lt;String, String&gt; auth(String username, String password)
</span><span class='line'>throws IOException {map.put("username", username);
</span><span class='line'>map.put("pwd", MD5.getMD5(password.substring(0, 15).getBytes()).toUpperCase());
</span><span class='line'>              map.put("f", "json");
</span><span class='line'>Response response = Jsoup.connect(LOGIN_URL).ignoreContentType(true).method(Method.POST).data(map).execute();
</span><span class='line'>              Map&lt;String, String&gt; cookies = response.cookies();
</span><span class='line'>用户密码验证通过后，服务器跳转到首页
</span><span class='line'>response = Jsoup.connect(INDEX_URL).ignoreContentType(true).method(Method.POST).cookies(cookies).execute();
</span><span class='line'>              return response.cookies();
</span><span class='line'>}
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<h4>3. 获取关注列表</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>public static List&lt;WeiXinFans&gt; getFans(Map&lt;String, String&gt; cookie)throws IOException {
</span><span class='line'>Document document = Jsoup.connect(FANS_URL).cookies(cookie).post();
</span><span class='line'>Elements eles = document.select("#json-friendList");
</span><span class='line'>Element element = eles.get(0);
</span><span class='line'>String json = element.data();
</span><span class='line'>Gson gson = new Gson();
</span><span class='line'>return gson.fromJson(json, new TypeToken&lt;List&lt;WeiXinFans&gt;&gt;() {}.getType());
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<h4>4. 发送消息</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>public static void sendMsg(Map&lt;String, String&gt; cookie, 
</span><span class='line'>String content,String fakeId) throws IOException {
</span><span class='line'>
</span><span class='line'>HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
</span><span class='line'>map.put("tofakeid", fakeId);
</span><span class='line'>map.put("content", content);
</span><span class='line'>map.put("error", "false");
</span><span class='line'>map.put("type", "1");
</span><span class='line'>map.put("ajax", "1");
</span><span class='line'>Document document = Jsoup.connect(SEND_MSG).data(map).cookies(cookie).post();
</span><span class='line'>Element body = document.body();
</span><span class='line'>System.out.println(body.text());
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<h4>5. test</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>public static void main(String[] args) throws IOException {
</span><span class='line'>Map&lt;String, String&gt; cookie = auth("用户名", "密码");
</span><span class='line'>List&lt;WeiXinFans&gt; list = getFans(cookie);
</span><span class='line'>for (WeiXinFans fans : list) {
</span><span class='line'>sendMsg(cookie, "起床了没有", fans.getFakeId());
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>上面便是相关代码，其中使用到了Jsoup与Gson 2个jar包</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA实现微信公众账号自定义消息回复]]></title>
    <link href="http://feicien.github.com/blog/2012/12/19/weixin-java-api/"/>
    <updated>2012-12-19T12:09:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/12/19/weixin-java-api</id>
    <content type="html"><![CDATA[<p>最近有没有在玩微信公众账号？很多公众账号有自动回复功能，比如爱范儿的appsolution发送Android或者IOS,它就会想你推荐好玩的app.</p>

<p>微信对公众账号提供了api接口来自定义回复介绍到的消息，并且提供了PHP的demo.这里我使用JAVA来实现接口的调用。</p>

<h3>能够实现本demo中描述的功能，你需要满足的下面的条件：</h3>

<ol>
<li>有一个微信公众账号</li>
<li>有能够运行在公网上的服务器（推荐使用新浪的SAE）</li>
<li>了解最基本的JAVA EE编程（会编写servlet）</li>
</ol>


<h3>(一)注册微信公众账号</h3>

<p>微信公众账号注册地址：<a href="http://mp.weixin.qq.com">http://mp.weixin.qq.com</a>。</p>

<p>公众账号需要与你的QQ号进行绑定。并且该QQ没有与其它的微信号绑定过（当然你可以先解除与其它微信的绑定）</p>

<h3>(二)设置公众平台接口信息</h3>

<p>注册成功后，进入微信公众账号管理界面，点击设置-&gt;自定义回复-&gt;前往设置。填写相关信息，其中需要注意的是URL和Token. 如果你随便填写URL的话，会提示下面的信息：你的服务器没有正确响应Token验证，请阅读消息接口使用指南。如图所示：</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-1.png" alt="解析xml" /></p>

<p>这也是为什么要求“有能够运行在公网上的服务器”。本文以新浪的SAE作为服务器环境（好消息，SAE已经开放JAVA应用，不需要满世界找邀请码了），在SAE上创建一个JAVA应用，并上传已经写好的JAVA WEB应用war包，该应用中只有一个Servlet.</p>

<p>其中doGet方法如图所示</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-14.png" alt="doget" /></p>

<p>这里只是简单的把接收到的echostr字符串原样的返回回去了。这样写是为了能够先通过微信服务器的验证。在SAE上部署好应用后，在回到微信公众账号设置界面，URL添加该servlet的访问地址，token随便填写一个字符串，点击提交。</p>

<!--more-->


<p>出现“提交成功”提示，说明接口配置成功了。如图所示</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-13.png" alt="提交成功" /></p>

<h3>(三)实现自定义消息回复</h3>

<p>微信服务器会在公众账号收到用户消息的时候，把消息通过post方法发送到你的服务器，也就是servlet的doPost方法，如图所示：</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-15.png" alt="dopost" /></p>

<p>doPost方法中主要实现3个功能：1、从输入流中获取到消息xml。2、通过业务逻辑得到回复的消息xml（具体逻辑后面会讲解）。3、把回复xml写给服务器服务器。</p>

<h3>(四)消息xml的格式</h3>

<p>消息分为文本消息、图文消息、位置消息。</p>

<p>文本消息xml格式</p>

<div>

<pre>&lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[this is a test]]&gt;&lt;/Content&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 文本消息为text

 Content 消息内容</pre>

</div>


<h4>地理位置消息xml格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[location]]&gt;&lt;/MsgType&gt;

 &lt;Location_X&gt;23.134521&lt;/Location_X&gt;

 &lt;Location_Y&gt;113.358803&lt;/Location_Y&gt;

 &lt;Scale&gt;20&lt;/Scale&gt;

 &lt;Label&gt;&lt;![CDATA[位置信息]]&gt;&lt;/Label&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 消息类型，地理位置为location

 Location_X 地理位置纬度

 Location_Y 地理位置经度

 Scale 地图缩放大小

 Label 地理位置信息</pre>

</div>


<h4>图片消息结构</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;

 &lt;PicUrl&gt;&lt;![CDATA[this is a url]&gt;&lt;/PicUrl&gt;

 &lt;/xml&gt;</pre>

<pre> ToUserName 消息接收方微信号，一般为公众平台账号微信号

 FromUserName 消息发送方微信号

 CreateTime 消息创建时间

 MsgType 消息类型image

 PicUrl 图片链接，开发者可以用HTTP GET获取</pre>

</div>


<p>&nbsp;</p>

<p>&nbsp;</p>

<h3>(五) 回复消息xml的格式</h3>

<p>对于每一个POST请求，开发者在响应包中返回特定xml结构，对该消息进行相应操作（现支持回复文本消息 、 回复图文消息和星标操作）。xml结构如下：</p>

<h4>回复文本消息格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[content]]&gt;&lt;/Content&gt;

 &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;

 &lt;/xml&gt;</pre>

<pre> FromUserName 消息发送方

 ToUserName 消息接收方

 CreateTime 消息创建时间

 MsgType 消息类型，文本消息必须填写text

 Content 消息内容，大小限制在2048字节，字段为空为不合法请求</pre>

</div>


<h4>回复图文消息格式</h4>

<div>

<pre> &lt;xml&gt;

 &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;

 &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;

 &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;

 &lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;

 &lt;Content&gt;&lt;![CDATA[]]&gt;&lt;/Content&gt;

 &lt;ArticleCount&gt;2&lt;/ArticleCount&gt;

 &lt;Articles&gt;

 &lt;item&gt;

 &lt;Title&gt;&lt;![CDATA[title1]]&gt;&lt;/Title&gt;

 &lt;Description&gt;&lt;![CDATA[description1]]&gt;&lt;/Description&gt;

 &lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;

 &lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;

 &lt;/item&gt;

 &lt;item&gt;

 &lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;

 &lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;

 &lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;

 &lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;

 &lt;/item&gt;

 &lt;/Articles&gt;

 &lt;FuncFlag&gt;1&lt;/FuncFlag&gt;

 &lt;/xml&gt;</pre>

<pre> FromUserName 消息发送方

 ToUserName 消息接收方

 CreateTime 消息创建时间

 MsgType 消息类型，图文消息必须填写news

 Content 消息内容，图文消息可填空

 ArticleCount 图文消息个数，限制为10条以内

 Articles 多条图文消息信息，默认第一个item为大图

 Title 图文消息标题

 Description 图文消息描述

 PicUrl 图片链接，支持JPG、PNG格式，较好的效果为大图640*320，小图80*80，限制图片链接的域名需要与开发者填写的基本资料中的Url一致

 Url 点击图文消息跳转链接</pre>

</div>


<h4>星标消息</h4>

<p>在xml结构中，有一个FuncFlag字段，开发者可以通过填写FuncFlag字段为1来对消息进行星标，你可以在实时消息的<a href="http://mp.weixin.qq.com/cgi-bin/getmessage?t=wxm-message&amp;lang=zh_CN&amp;count=50&amp;star=1">星标消息分类</a>中找到该消息</p>

<h3>(六)自定义消息回复</h3>

<p>在doPost方法中的第二步，我们要处理请求的xml得到回复的xml，具体的逻辑是：
1. 解析xml。
2. 保存消息到数据库（便于分析数据，你也可以不保存）。
3. 处理消息。如图所示：</p>

<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-16.png" alt="解析xml" /></p>

<ol>
<li>解析xml,把解析到的数据保存到HashMap中</li>
</ol>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-17.png" alt="解析xml" /></p>

<ul>
<li><p>保存数据到数据库，如果你不想保存到数据库，这一步可以省略</p></li>
<li><p>处理消息,不同类型的消息可以通过MsgType来识别</p></li>
</ul>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-18.png" alt="处理消息" /></p>

<ul>
<li>处理文本消息，这里演示回应一个文本消息，实际的处理是你的具体业务决定的</li>
</ul>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-19.png" alt="处理文本信息" /></p>

<ul>
<li>生成xml文件</li>
</ul>


<p><img src="http://feicien.github.com/images/blog/2012/12/QQ20121219-20.png" alt="生成xml" /></p>

<p><strong>结束语</strong>：解析与生成xml使用的是dom4j,如果你也使用它，需要添加相关jar包。另外，本人不提供源代码，因为相关的代码我都贴出来了。如果你不懂Java EE的相关编程，给你源代码，你还问我怎么运行呢。欢迎关注我的微博：<a href="http://weibo.com/feicien">http://weibo.com/feicien</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android服务器推送之GCM]]></title>
    <link href="http://feicien.github.com/blog/2012/11/27/android-push-gcm/"/>
    <updated>2012-11-27T11:56:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/11/27/android-push-gcm</id>
    <content type="html"><![CDATA[<p>GCM(Google Cloud Message for Android)是Google发布的Android服务器推送（push）技术。之前的C2DM(Android Cloud to Device Messaging)已与2012年6月26日被正式弃用，使用GCM,需要申请开通Google apis,Google apis包括了所有Google服务的api,比如Google Map、Google+、Analytics、YouTube等等，申请地址为：
<a href="https://code.google.com/apis/console">Google API 网站</a></p>

<h3>GCM有以下特点：</h3>

<ol>
<li>可以使用第三方应用服务器向Android应用推送消息</li>
<li>GCM不保证发送的消息的顺序，也不保证消息一定能够推送到手机（恩，谁也不能保证100%）</li>
<li>Android应用不需要运行就可以接收消息（是的，你没有看错，因为gcm被集成到系统中了，目前一些第三方的推送是在后台运行一个service维持长连接，与这些第三方推送相比，GCM不额外的耗电）</li>
<li>GCM只传递的数据（可以传递小于4kb的数据），对这些数据的处理可以全部由开发者控制（Google不对数据进行任何处理，仅仅转发一下而已）</li>
<li>对于Android4.04以上的系统使用GCM没有任何限制（国行手机也可以使用，截止2013年02月04日，android4.0+的份额为42.6%，随着4.0+版本的提升，Android的推送不再成为一个问题 <a href="https://developer.android.com/about/dashboards/index.html">Android版本分布</a>），Android2.2以上的系统需要安装Google Play Store，Android2.2以下的系统不能够使用GCM</li>
<li>对于Android3.0以前的系统，需要在设备上设置google账号</li>
<li>gcm一次最多只能向1000部设备发送消息，没有提供向所有用户发送的接口（可能google认为向应用程序推送的消息都是与该用户相关的，如果你非要实现群发，一次发送1000个用户，多发送几次就行了）</li>
</ol>


<h3>GCM使用流程如下图所示：</h3>

<p><img src="http://feicien.github.com/images/blog/2011/11/gcm.png" alt="gcm使用流程图" /></p>

<p><strong>App</strong>是运行在Android手机上的应用程序，<strong>GCM Server</strong>是Google的GCM服务器，<strong>Our Server</strong>是第三方应用服务器。具体流程如下：</p>

<ol>
<li><strong>App</strong>发送 <strong>SenderID</strong>到<strong>GCM Server</strong>注册接收推送信息(SendID是开发者在Google的网站开通GCM服务时，创建项目的项目号)。</li>
<li><strong>GCM Server</strong> 向<strong>App</strong>返回RegId(RegId是GCM服务器通过一定算法生产的，可以唯一确定某一部手机上的某一个应用，这个RegId很重要)。</li>
<li><strong>App</strong>向<strong>Our Server</strong>发送RegId(推送消息的时候要使用RegId，GCM服务器是使用RegId来确定某一部手机上的某一个应用接收消息的，所以第三方服务器需要保存它，需要注意的是RegId很长，比如可能有183位，存数据库时需要注意字段长度)</li>
<li><strong>Our Server</strong>向<strong>GCM Server</strong>发送消息,传递appkey和RegId(appkey分为Oauth api key和simple api key)</li>
<li><strong>GCM Server</strong>把消息推送给<strong>App</strong></li>
</ol>


<p>更多信息，请访问<a href="https://developer.android.com/guide/google/gcm/gs.html">Android开发网站</a>，上面有快速开发指导，客户端与服务端集成介绍，和Demo下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat 配置JDBC数据源datasource]]></title>
    <link href="http://feicien.github.com/blog/2012/05/08/java-tomcat-jdbc-datasource/"/>
    <updated>2012-05-08T18:07:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/05/08/java-tomcat-jdbc-datasource</id>
    <content type="html"><![CDATA[<h4>1. 编辑Tomcat安装目录conf文件夹中server.xml,在</Host>标签前添加</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Context  path="/chaoshi" 
</span><span class='line'>　　　　　　docBase="chaoshi"
</span><span class='line'>　　　　　　debug="5" 
</span><span class='line'>　　　　　　reloadable="true" 
</span><span class='line'>　　　　　　crossContext="true"   
</span><span class='line'>　　　　　　workDir=""&gt;
</span><span class='line'>             &lt;Resource  name="jdbc/mydatasource"
</span><span class='line'>                        auth="Container"
</span><span class='line'>　　　　　　　　　　　　　　type="javax.sql.DataSource"
</span><span class='line'>                 　 　　 maxActive="100" 
</span><span class='line'>　　　　　　　　　　　　　　maxIdle="30" 
</span><span class='line'>　　　　　　　　　　　　　　maxWait="10000"
</span><span class='line'>                  　　　 username="root" 
</span><span class='line'>　　　　　　　　　　　　　　password="123456"
</span><span class='line'>　　　　　　　　　　　　　　driverClassName="com.mysql.jdbc.Driver"
</span><span class='line'>　　　　　　　　　　　　　　url="jdbc:mysql://localhost:3306/mydatabase"/&gt;
</span><span class='line'>&lt;/Context&gt;</span></code></pre></td></tr></table></div></figure>


<h4>2. 在应用的WEB-INF目录下web.xml文件中添加如下配置</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resource-ref&gt;
</span><span class='line'>　　&lt;description&gt;DB Connection&lt;/description&gt;
</span><span class='line'>　　&lt;res-ref-name&gt;jdbc/mydatasource&lt;/res-ref-name&gt;
</span><span class='line'>　　&lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
</span><span class='line'>　　&lt;res-auth&gt;Container&lt;/res-auth&gt;
</span><span class='line'>&lt;/resource-ref&gt;</span></code></pre></td></tr></table></div></figure>


<h4>3. 在JSP或Servlet或JavaBean中用如下Java代码获得数据库连接</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Context initial = new InitialContext(); 
</span><span class='line'>//其中mysql为数据源jndi名称 
</span><span class='line'>DataSource ds = (DataSource)initial.lookup("java:comp/env/jdbc/mydatasource");
</span><span class='line'>Connection con=ds.getConnection();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts2+Hibernate+Spring+Webservice 项目从Tomcat到WebLogic遇到问题的解决方法]]></title>
    <link href="http://feicien.github.com/blog/2012/04/26/ssh-from-tomcat-to-weblogic/"/>
    <updated>2012-04-26T20:41:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/04/26/ssh-from-tomcat-to-weblogic</id>
    <content type="html"><![CDATA[<p>公司一个SSH+Webservice项目开发时是在Tomcat下运行的。却不能部署到WebLogic上。</p>

<p>下面是遇到的问题和相应的解决办法</p>

<h4>一、异常</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Could not load user defined filter in web.xml: org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.
</span><span class='line'>ClassNotFoundException:org.apache.velocity.app.VelocityEngine</span></code></pre></td></tr></table></div></figure>


<p><strong>解决方法：添加2个jar包</strong></p>

<ul>
<li>velocity-tools-2.0.jar</li>
<li>velocity-1.7.jar</li>
</ul>


<h4>二、异常</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[com.sun.xml.ws.policy.jaxws.BuilderHandler] getPolicySubjects 
</span><span class='line'>严重: [failed to localize] WSP_1014_POLICY_REFERENCE_DOES_NOT_EXIST(zip:D:/bea/weblogic1034/webdomain/servers/AdminServer/tmp/_WL_user/_appsdir_WebServicePro_dir/achpn5/war/WEB-INF/lib/webservices-rt.jar!/WEB-INF/wsdl/wsat.wsdl#Addressing_policy) 
</span><span class='line'>[com.sun.xml.ws.policy.jaxws.PolicyWSDLParserExtension] finished 
</span><span class='line'>严重: [failed to localize] WSP_1014_POLICY_REFERENCE_DOES_NOT_EXIST(zip:D:/bea/weblogic1034/webdomain/servers/AdminServer/tmp/_WL_user/_appsdir_WebServicePro_dir/achpn5/war/WEB-INF/lib/webservices-rt.jar!/WEB-INF/wsdl/wsat.wsdl#Addressing_policy) 
</span><span class='line'>[com.sun.xml.ws.policy.jaxws.PolicyWSDLParserExtension] finished 
</span><span class='line'>严重: [failed to localize] WSP_1018_POLICY_EXCEPTION_WHILE_FINISHING_PARSING_WSDL() 
</span><span class='line'>com.sun.xml.ws.policy.PolicyException: [failed to localize] WSP_1014_POLICY_REFERENCE_DOES_NOT_EXIST(zip:D:/bea/weblogic1034/webdomain/servers/AdminServer/tmp/_WL_user/_appsdir_WebServicePro_dir/achpn5/war/WEB-INF/lib/webservices-rt.jar!/WEB-INF/wsdl/wsat.wsdl#Addressing_policy) 
</span><span class='line'>at com.sun.xml.ws.policy.jaxws.BuilderHandler.getPolicies(BuilderHandler.java:93)</span></code></pre></td></tr></table></div></figure>


<p><strong>解决办法：删除以下5个jar包</strong></p>

<ul>
<li>webservices-extra-api.jar</li>
<li>webservices-extra.jar</li>
<li>webservices-rt.jar</li>
<li>webservices-tools.jar</li>
<li>wsdl4j-1.5.1.jar</li>
</ul>


<h4>三、ClassNotFoundException: org.hibernate.hql.ast.HqlToken(hibernate3 weblogic antrl 问题</h4>

<p><strong>解决办法：在applicationContext.xml中的，设置hibernate.query.factory_class</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;property name="hibernateProperties"&gt;
</span><span class='line'>&lt;pros&gt;
</span><span class='line'>
</span><span class='line'>&lt;prop key="hibernate.query.factory_class"&gt;org.hibernate.hql.classic.ClassicQueryTranslatorFactory&lt;/prop&gt;
</span><span class='line'>&lt;/pros&gt;
</span><span class='line'>&lt;/property&gt;</span></code></pre></td></tr></table></div></figure>


<h4>四、日志问题：　</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate4.1.2配置]]></title>
    <link href="http://feicien.github.com/blog/2012/04/20/start-hibernate4.1.2/"/>
    <updated>2012-04-20T16:08:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/04/20/start-hibernate4.1.2</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;?xml version='1.0' encoding='utf-8'?&gt;
</span><span class='line'>&lt;!DOCTYPE hibernate-configuration PUBLIC
</span><span class='line'>        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
</span><span class='line'>        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
</span><span class='line'>
</span><span class='line'>&lt;hibernate-configuration&gt;
</span><span class='line'>    &lt;session-factory&gt;
</span><span class='line'>        &lt;!-- 数据库的配置 --&gt;
</span><span class='line'>        &lt;property name="hibernate.bytecode.use_reflection_optimizer"&gt;false&lt;/property&gt;
</span><span class='line'>        &lt;property name="hibernate.connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;
</span><span class='line'>        &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/hibernate&lt;/property&gt;
</span><span class='line'>        &lt;property name="hibernate.connection.username"&gt;root&lt;/property&gt;
</span><span class='line'>        &lt;property name="hibernate.connection.password"&gt;123456&lt;/property&gt;
</span><span class='line'>        &lt;!-- SQL dialect 数据库方言，这里我们用MySQL --&gt;
</span><span class='line'>        &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
</span><span class='line'>        &lt;!-- 设置show_sql为true表示让hibernate将生成sql语句在控制台打印出来 --&gt;
</span><span class='line'>        &lt;property name="show_sql"&gt;true&lt;/property&gt;
</span><span class='line'>        &lt;!-- Drop and re-create the database schema on startup 是否让hibernate自动为我们创建表 --&gt;
</span><span class='line'>        &lt;property name="hbm2ddl.auto"&gt;update&lt;/property&gt;
</span><span class='line'>        &lt;property name="javax.persistence.validation.mode"&gt;none&lt;/property&gt;
</span><span class='line'>        &lt;mapping class="com.loveplusplus.bean.Category"/&gt;
</span><span class='line'>        &lt;mapping class="com.loveplusplus.bean.Goods"/&gt;
</span><span class='line'>    &lt;/session-factory&gt;
</span><span class='line'>
</span><span class='line'>&lt;/hibernate-configuration&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建Android4.0平板模拟器]]></title>
    <link href="http://feicien.github.com/blog/2012/04/10/create-android4.0-avd/"/>
    <updated>2012-04-10T18:36:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/04/10/create-android4.0-avd</id>
    <content type="html"><![CDATA[<p>今天让我们来创建一个Android4.0的平板电脑模拟器，体验一下它有哪些特性吧。</p>

<p>过程和创建一般模拟器是一样的，如下图所示：</p>

<p><img src="http://feicien.github.com/images/blog/2012/04/10/avd.png" alt="avd" /></p>

<ol>
<li>输入模拟器的名称</li>
<li>选择target android4.0.3</li>
<li>设置SD卡的大小</li>
<li>Skin 选择WXGA800</li>
<li>Hardware中的最后一项 默认是1024，在这里我把它改为了512（或者256）。</li>
</ol>


<p>如果不进行修改，电脑配置比较低的话，是无法启动模拟器的。1024好像代表给模拟器分配1G内存。</p>

<p>刚开始因为不了解这个情况，在Eclipse中，点击avd manager启动刚创建好的模拟器，无法启动，一定反应都没有。</p>

<p>傻傻等了几分钟。</p>

<p>后来在cmd命令行中启动，报了一个异常。google之，才找到原因</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Dashboard]]></title>
    <link href="http://feicien.github.com/blog/2012/03/20/android-dashboard/"/>
    <updated>2012-03-20T21:08:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/03/20/android-dashboard</id>
    <content type="html"><![CDATA[<p>Android Dashboard(仪表盘)，是一种Android UI设计模式，使用这种UI设计模式的应用可以把功能模块在同一个界面显示出来，目前（2013年03月11日更新），市场上已经很少见到这样的应用了，但在给政府做的项目中，使用这种设计的还比较多，因为这样的设计，可以更方便给客户演示功能。效果图如下：</p>

<p><img src="http://feicien.github.com/images/blog/2012/03/20/android_dashboard.png" alt="仪表盘" /></p>

<p>目前网络上的教程，基本上是参考2011年的Google IO大会的官方应用的 <a href="http://code.google.com/p/iosched/">iosched</a>
DashboardLayout.java类集成自ViewGroup</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class DashboardLayout extends ViewGroup {
</span><span class='line'>
</span><span class='line'>    private static final int UNEVEN_GRID_PENALTY_MULTIPLIER = 10;
</span><span class='line'>
</span><span class='line'>    private int mMaxChildWidth = 0;
</span><span class='line'>    private int mMaxChildHeight = 0;
</span><span class='line'>
</span><span class='line'>    public DashboardLayout(Context context) {
</span><span class='line'>        super(context, null);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public DashboardLayout(Context context, AttributeSet attrs) {
</span><span class='line'>        super(context, attrs, 0);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public DashboardLayout(Context context, AttributeSet attrs, int defStyle) {
</span><span class='line'>        super(context, attrs, defStyle);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
</span><span class='line'>        mMaxChildWidth = 0;
</span><span class='line'>        mMaxChildHeight = 0;
</span><span class='line'>
</span><span class='line'>        // Measure once to find the maximum child size.
</span><span class='line'>
</span><span class='line'>        int childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(
</span><span class='line'>                MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.AT_MOST);
</span><span class='line'>        int childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(
</span><span class='line'>                MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.AT_MOST);
</span><span class='line'>
</span><span class='line'>        final int count = getChildCount();
</span><span class='line'>        for (int i = 0; i &lt; count; i++) {
</span><span class='line'>            final View child = getChildAt(i);
</span><span class='line'>            if (child.getVisibility() == GONE) {
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
</span><span class='line'>
</span><span class='line'>            mMaxChildWidth = Math.max(mMaxChildWidth, child.getMeasuredWidth());
</span><span class='line'>            mMaxChildHeight = Math.max(mMaxChildHeight, child.getMeasuredHeight());
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        // Measure again for each child to be exactly the same size.
</span><span class='line'>
</span><span class='line'>        childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(
</span><span class='line'>                mMaxChildWidth, MeasureSpec.EXACTLY);
</span><span class='line'>        childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(
</span><span class='line'>                mMaxChildHeight, MeasureSpec.EXACTLY);
</span><span class='line'>
</span><span class='line'>        for (int i = 0; i &lt; count; i++) {
</span><span class='line'>            final View child = getChildAt(i);
</span><span class='line'>            if (child.getVisibility() == GONE) {
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        setMeasuredDimension(
</span><span class='line'>                resolveSize(mMaxChildWidth, widthMeasureSpec),
</span><span class='line'>                resolveSize(mMaxChildHeight, heightMeasureSpec));
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onLayout(boolean changed, int l, int t, int r, int b) {
</span><span class='line'>        int width = r - l;
</span><span class='line'>        int height = b - t;
</span><span class='line'>
</span><span class='line'>        final int count = getChildCount();
</span><span class='line'>
</span><span class='line'>        // Calculate the number of visible children.
</span><span class='line'>        int visibleCount = 0;
</span><span class='line'>        for (int i = 0; i &lt; count; i++) {
</span><span class='line'>            final View child = getChildAt(i);
</span><span class='line'>            if (child.getVisibility() == GONE) {
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>            ++visibleCount;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if (visibleCount == 0) {
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        // Calculate what number of rows and columns will optimize for even horizontal and
</span><span class='line'>        // vertical whitespace between items. Start with a 1 x N grid, then try 2 x N, and so on.
</span><span class='line'>        int bestSpaceDifference = Integer.MAX_VALUE;
</span><span class='line'>        int spaceDifference;
</span><span class='line'>
</span><span class='line'>        // Horizontal and vertical space between items
</span><span class='line'>        int hSpace = 0;
</span><span class='line'>        int vSpace = 0;
</span><span class='line'>
</span><span class='line'>        int cols = 1;
</span><span class='line'>        int rows;
</span><span class='line'>
</span><span class='line'>        while (true) {
</span><span class='line'>            rows = (visibleCount - 1) / cols + 1;
</span><span class='line'>
</span><span class='line'>            hSpace = ((width - mMaxChildWidth * cols) / (cols + 1));
</span><span class='line'>            vSpace = ((height - mMaxChildHeight * rows) / (rows + 1));
</span><span class='line'>
</span><span class='line'>            spaceDifference = Math.abs(vSpace - hSpace);
</span><span class='line'>            if (rows * cols != visibleCount) {
</span><span class='line'>                spaceDifference *= UNEVEN_GRID_PENALTY_MULTIPLIER;
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            if (spaceDifference &lt; bestSpaceDifference) {
</span><span class='line'>                // Found a better whitespace squareness/ratio
</span><span class='line'>                bestSpaceDifference = spaceDifference;
</span><span class='line'>
</span><span class='line'>                // If we found a better whitespace squareness and there's only 1 row, this is
</span><span class='line'>                // the best we can do.
</span><span class='line'>                if (rows == 1) {
</span><span class='line'>                    break;
</span><span class='line'>                }
</span><span class='line'>            } else {
</span><span class='line'>                // This is a worse whitespace ratio, use the previous value of cols and exit.
</span><span class='line'>                --cols;
</span><span class='line'>                rows = (visibleCount - 1) / cols + 1;
</span><span class='line'>                hSpace = ((width - mMaxChildWidth * cols) / (cols + 1));
</span><span class='line'>                vSpace = ((height - mMaxChildHeight * rows) / (rows + 1));
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            ++cols;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        // Lay out children based on calculated best-fit number of rows and cols.
</span><span class='line'>
</span><span class='line'>        // If we chose a layout that has negative horizontal or vertical space, force it to zero.
</span><span class='line'>        hSpace = Math.max(0, hSpace);
</span><span class='line'>        vSpace = Math.max(0, vSpace);
</span><span class='line'>
</span><span class='line'>        // Re-use width/height variables to be child width/height.
</span><span class='line'>        width = (width - hSpace * (cols + 1)) / cols;
</span><span class='line'>        height = (height - vSpace * (rows + 1)) / rows;
</span><span class='line'>
</span><span class='line'>        int left, top;
</span><span class='line'>        int col, row;
</span><span class='line'>        int visibleIndex = 0;
</span><span class='line'>        for (int i = 0; i &lt; count; i++) {
</span><span class='line'>            final View child = getChildAt(i);
</span><span class='line'>            if (child.getVisibility() == GONE) {
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            row = visibleIndex / cols;
</span><span class='line'>            col = visibleIndex % cols;
</span><span class='line'>
</span><span class='line'>            left = hSpace * (col + 1) + width * col;
</span><span class='line'>            top = vSpace * (row + 1) + height * row;
</span><span class='line'>
</span><span class='line'>            child.layout(left, top,
</span><span class='line'>                    (hSpace == 0 && col == cols - 1) ? r : (left + width),
</span><span class='line'>                    (vSpace == 0 && row == rows - 1) ? b : (top + height));
</span><span class='line'>            ++visibleIndex;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Http Client]]></title>
    <link href="http://feicien.github.com/blog/2012/03/18/android-http-client/"/>
    <updated>2012-03-18T21:13:00+08:00</updated>
    <id>http://feicien.github.com/blog/2012/03/18/android-http-client</id>
    <content type="html"><![CDATA[<p>大部分Android应用程序联网都是通过HTTP来发送和接受数据的。Android有2个Http客户端：HttpURLConnection和Apache Http Client.它们都支持Https,流媒体的上传下载，配置连接超时，ipv6和连接池。</p>

<p>那么在我们的程序中选择哪一个好呢？</p>

<p>通过Android的官方博客：<a href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html">blogspot博客，需要翻墙</a> 如果你的应用api版本2.3及以上HttpURLConnection是更好的选择。</p>

<p>下面通过代码来演示HttpURLConnection的使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//获取html源代码
</span><span class='line'>    public static String getHtml(String path) throws Exception {
</span><span class='line'>        URL url=new URL(path);
</span><span class='line'>        HttpURLConnection conn=(HttpURLConnection)url.openConnection();
</span><span class='line'>        
</span><span class='line'>        conn.setConnectTimeout(5000);
</span><span class='line'>        conn.setRequestMethod("GET");
</span><span class='line'>        
</span><span class='line'>        if(conn.getResponseCode()==200){
</span><span class='line'>            InputStream is=conn.getInputStream();
</span><span class='line'>            byte[] data=read(is);
</span><span class='line'>            String html=new String(data,"UTF-8");
</span><span class='line'>            return html;
</span><span class='line'>        }
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>//将输入流读到内存中
</span><span class='line'>    public static byte[] read(InputStream is) throws IOException {
</span><span class='line'>        ByteArrayOutputStream baos=new ByteArrayOutputStream();
</span><span class='line'>        
</span><span class='line'>        byte[] buffer =new byte[1024];
</span><span class='line'>        int len=0;
</span><span class='line'>        while((len=is.read(buffer))!=-1){
</span><span class='line'>            baos.write(buffer, 0, len);
</span><span class='line'>        }
</span><span class='line'>        is.close();
</span><span class='line'>        return baos.toByteArray();
</span><span class='line'>    }
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android使用style实现TextView圆角效果]]></title>
    <link href="http://feicien.github.com/blog/2011/11/27/android-textview-round/"/>
    <updated>2011-11-27T13:09:00+08:00</updated>
    <id>http://feicien.github.com/blog/2011/11/27/android-textview-round</id>
    <content type="html"><![CDATA[<p>先上效果图：</p>

<p><img src="http://feicien.github.com/images/blog/2011/11/textview_round.png" alt="demo" /></p>

<p>新建一个Android项目
main.xml如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:background="#ffffff"
</span><span class='line'>    android:orientation="vertical" &gt;
</span><span class='line'>
</span><span class='line'>    &lt;LinearLayout
</span><span class='line'>        android:layout_width="fill_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_marginLeft="10.0dip"
</span><span class='line'>        android:layout_marginRight="10.0dip"
</span><span class='line'>        android:layout_marginTop="10.0dip"
</span><span class='line'>        android:background="@anim/shape_rounded_rectangle"
</span><span class='line'>        android:orientation="vertical" &gt;
</span><span class='line'>
</span><span class='line'>        &lt;RelativeLayout
</span><span class='line'>            android:layout_width="fill_parent"
</span><span class='line'>            android:layout_height="45.0dip"
</span><span class='line'>            android:background="@anim/more_up"
</span><span class='line'>            android:gravity="center_vertical" &gt;
</span><span class='line'>
</span><span class='line'>            &lt;TextView
</span><span class='line'>                style="@style/style_16_666666_BOLD"
</span><span class='line'>                android:layout_width="wrap_content"
</span><span class='line'>                android:layout_height="wrap_content"
</span><span class='line'>                android:layout_centerVertical="true"
</span><span class='line'>                android:layout_marginLeft="15.0dip"
</span><span class='line'>                android:text="账号管理" /&gt;
</span><span class='line'>
</span><span class='line'>            &lt;ImageView
</span><span class='line'>                android:layout_width="wrap_content"
</span><span class='line'>                android:layout_height="wrap_content"
</span><span class='line'>                android:layout_alignParentRight="true"
</span><span class='line'>                android:layout_centerVertical="true"
</span><span class='line'>                android:layout_marginRight="20.0dip"
</span><span class='line'>                android:src="@drawable/arrow" /&gt;
</span><span class='line'>        &lt;/RelativeLayout&gt;
</span><span class='line'>
</span><span class='line'>        &lt;ImageView
</span><span class='line'>            android:layout_width="fill_parent"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:background="@drawable/line" /&gt;
</span><span class='line'>
</span><span class='line'>        &lt;RelativeLayout
</span><span class='line'>            android:id="@+id/relMoreSet"
</span><span class='line'>            android:layout_width="fill_parent"
</span><span class='line'>            android:layout_height="45.0dip"
</span><span class='line'>            android:background="@anim/more_down"
</span><span class='line'>            android:gravity="center_vertical" &gt;
</span><span class='line'>
</span><span class='line'>            &lt;TextView
</span><span class='line'>                style="@style/style_16_666666_BOLD"
</span><span class='line'>                android:layout_width="wrap_content"
</span><span class='line'>                android:layout_height="wrap_content"
</span><span class='line'>                android:layout_centerVertical="true"
</span><span class='line'>                android:layout_marginLeft="15.0dip"
</span><span class='line'>                android:text="设置" /&gt;
</span><span class='line'>
</span><span class='line'>            &lt;ImageView
</span><span class='line'>                android:layout_width="wrap_content"
</span><span class='line'>                android:layout_height="wrap_content"
</span><span class='line'>                android:layout_alignParentRight="true"
</span><span class='line'>                android:layout_centerVertical="true"
</span><span class='line'>                android:layout_marginRight="20.0dip"
</span><span class='line'>                android:src="@drawable/arrow" /&gt;
</span><span class='line'>        &lt;/RelativeLayout&gt;
</span><span class='line'>    &lt;/LinearLayout&gt;
</span><span class='line'>&lt;/LinearLayout&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Demo下载地址
http://download.csdn.net/detail/love7323315/4785755</p>
]]></content>
  </entry>
  
</feed>
